// ---------------------------------------------------------
//   ATMEL Microcontroller Software Support  -  ROUSSET  -
// ---------------------------------------------------------
// The software is delivered "AS IS" without warranty or
// condition of any  kind, either express, implied or
// statutory. This includes without limitation any warranty
// or condition with respect to merchantability or fitness
// for any particular purpose, or against the infringements of
// intellectual property rights of others.
// ---------------------------------------------------------
//  File: FlashSAM3Nx.mac
//  User setup file for CSPY debugger.
// ---------------------------------------------------------
__var __temp_i;

PllSetting()
{
    //if(!(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL))
    if ((__readMemory32(0x400E0420,"Memory")& (0x1 << 24)) == 0 ) {
        
        __writeMemory32(0x00370809,0x400E0420,"Memory");
         //while (!(PMC->PMC_SR & PMC_SR_MOSCXTS) && (timeout++ < CLOCK_TIMEOUT));
         __message " ---------------------------------------- CKGR_MOR_MOSCSEL ";  
        while((__readMemory32(0x400E0468U,"Memory")& (0x1)) == 0);
        __message " ---------------------------------------- CKGR_MOR_MOSCSEL done ";  
    }
    
    //PMC->CKGR_MOR = (0x37 << 16) | BOARD_OSCOUNT | CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN | CKGR_MOR_MOSCSEL;
    __writeMemory32(0x01370809,0x400E0420,"Memory");
    __message " ---------------------------------------- 1 ";  
    while((__readMemory32(0x400E0468U,"Memory")& (0x1<<16)) == 0);
        __message " ---------------------------------------- 1 done";  
        
        
    //PMC->PMC_MCKR = (PMC->PMC_MCKR & ~PMC_MCKR_CSS) | PMC_MCKR_CSS_MAIN_CLK;
    __writeMemory32(0x00000001,0x400E0430,"Memory");
    __message " ---------------------------------------- 2 ";  
    while((__readMemory32(0x400E0468U,"Memory")& (0x1<<3)) == 0);
    __message " ---------------------------------------- 2 done";  
    

    //PMC->CKGR_PLLAR = ( PMC_PLLA_SET_BIT29 | PMC_PLLA_MULTIPIER |   PMC_PLLA_COUNT |  PMC_PLLA_DIV );
    __writeMemory32(0x20073F01,0x400E0428,"Memory");
    __message " ---------------------------------------- 3";  
    while((__readMemory32(0x400E0468U,"Memory")& (0x1<<1)) == 0);
   __message " ---------------------------------------- 3 done";  
   
    //PMC->PMC_MCKR = (BOARD_MCKR & ~PMC_MCKR_CSS) | PMC_MCKR_CSS_MAIN_CLK;
    __writeMemory32(0x00000011,0x400E0430,"Memory");
    __message " ---------------------------------------- 4";  
    while((__readMemory32(0x400E0468U,"Memory")& (0x1<<3)) == 0);
    __message " ---------------------------------------- 4 done";  
        
    //PMC->PMC_MCKR = BOARD_MCKR;
    __writeMemory32(0x00000012,0x400E0430,"Memory");
    __message " ---------------------------------------- 5";  
    while((__readMemory32(0x400E0468U,"Memory")& (0x1<<3)) == 0);
    __message " ---------------------------------------- PLL Enable ";  
}

/*********************************************************************
*
*       execUserReset()
*/
execUserReset()
{
    __message "------------------------------ execUserReset ---------------------------------";
    __message "-------------------------------Set PC Reset ----------------------------------";
    
    
    __hwReset(0);

    // perpheral reset RSTC_CR
    //__writeMemory32(0xA5000004,0x400e1400,"Memory");
    
    //PllSetting();                        //* Init PLL
    // __writeMemory32(0x0000100,0x400E0A00,"Memory");    // Set 2 WS for Embedded Flash Access 
    
}

/*********************************************************************
*
*       execUserPreload()
*/
execUserPreload()
{
    __message "------------------------------ execUserPreload ---------------------------------";

   // __hwReset(0);                          //* Hardware Reset: CPU is automatically halted after the reset

   // perpheral reset RSTC_CR
   // __writeMemory32(0xA5000004,0x400e1400,"Memory");
   // PllSetting();                        //* Init PLL
   //__writeMemory32(0x0000300,0x400E0A00,"Memory");    // Set 2 WS for Embedded Flash Access 
}

/*********************************************************************
*
*       execUserFlashInit() : JTAG set initially to 32kHz
*/

execUserFlashInit()
{

    __message "------------------------------ execUserFlashInit ---------------------------------";
    
    
   __hwReset(0);                          //* Hardware Reset: CPU is automatically halted after the res
        
   // perpheral reset RSTC_CR
   // __writeMemory32(0xA5000004,0x400e1400,"Memory");
   // __sleep(2000);
  
   __writeMemory32(0x000008000,0x400E1454,"Memory");    //Watch dog disable 
  
   //PllSetting();                        //* Init PLL
   __writeMemory32(0x0000700,0x400E0A00,"Memory");    // Set 8 WS for Embedded Flash Access     

}


/*********************************************************************
*
*       execUserFlashExit()
*/
execUserFlashExit()
{
    __message "------------------------------ execUserFlashExit ---------------------------------";
}
